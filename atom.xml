<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/alongswebsite/atom.xml" rel="self"/>
  
  <link href="https://alongisme.github.io/"/>
  <updated>2019-07-04T12:56:44.901Z</updated>
  <id>https://alongisme.github.io/</id>
  
  <author>
    <name>Along Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;NSLog 简介&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/04/nslog/"/>
    <id>https://alongisme.github.io/2019/07/04/nslog/</id>
    <published>2019-07-04T12:52:30.000Z</published>
    <updated>2019-07-04T12:56:44.901Z</updated>
    
    <content type="html"><![CDATA[<hr><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifdef DEBUG  </span></span><br><span class="line"><span class="meta"># define DLog(fmt, ...) NSLog((@<span class="meta-string">"[文件名:%s]\n"</span> <span class="meta-string">"[函数名:%s]\n"</span> <span class="meta-string">"[行号:%d] \n"</span> fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);  </span></span><br><span class="line"><span class="meta">#else  </span></span><br><span class="line"><span class="meta"># define DLog(...);  </span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure><ul><li><p>__VA_ARGS__ 是一个可变参数的宏，很少人知道这个宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支持（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的”,”去掉的作用,否则会编译出错, 你可以试试。</p></li><li><p>__FILE__ 宏在预编译时会替换成当前的源文件名</p></li><li><p>__LINE__宏在预编译时会替换成当前的行号</p></li><li><p>__FUNCTION__宏在预编译时会替换成当前的函数名称<br>有了以上这几个宏，特别是有了__VA_ARGS__ ，调试信息的输出就变得灵活多了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
      <category term="iOS" scheme="https://alongisme.github.io/categories/iOS/"/>
    
    
      <category term="基础知识" scheme="https://alongisme.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="NSLog" scheme="https://alongisme.github.io/tags/NSLog/"/>
    
      <category term="控制台" scheme="https://alongisme.github.io/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;const static extern 简介&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/04/const_static_extern/"/>
    <id>https://alongisme.github.io/2019/07/04/const_static_extern/</id>
    <published>2019-07-04T06:45:03.000Z</published>
    <updated>2019-07-04T12:50:06.304Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="const与宏的区别："><a href="#const与宏的区别：" class="headerlink" title="const与宏的区别："></a><strong>const与宏的区别：</strong></h2><p style="text-indent:2em">const简介：之前常用的字符串常量，一般是抽成宏，但是苹果不推荐我们抽成宏，推荐我们使用const常量。</p><ul><li>编译时刻:宏是预编译（编译之前处理），const是编译阶段。</li><li>编译检查:宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。</li><li>宏的好处:宏能定义一些函数，方法。 const不能。</li><li>宏的坏处:使用大量宏，容易造成编译时间久，每次都需要重新替换。</li></ul><p style="text-indent:2em">注意:很多Blog都说使用宏，会消耗很多内存，我这验证并不会生成很多内存，宏定义的是常量，常量都放在常量区，只会生成一份内存。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见的常量：抽成宏</span></span><br><span class="line"><span class="meta">#define XMGAccount @<span class="meta-string">"account"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define XMGUserDefault [NSUserDefaults standardUserDefaults]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串常量</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> account = <span class="string">@"account"</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 偏好设置存储</span></span><br><span class="line">    <span class="comment">// 使用宏</span></span><br><span class="line">    [XMGUserDefault setValue:<span class="string">@"123"</span> forKey:XMGAccount];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用const常量</span></span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:<span class="string">@"123"</span> forKey:account];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const作用：限制类型"><a href="#const作用：限制类型" class="headerlink" title="const作用：限制类型"></a><strong>const作用：限制类型</strong></h2><ol><li>const仅仅用来修饰右边的变量（基本数据变量p，指针变量*p）</li><li>被const修饰的变量是只读的。</li><li>const 的基本使用</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许修改值</span></span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const两种用法</span></span><br><span class="line">    <span class="comment">// const:修饰基本变量p</span></span><br><span class="line">    <span class="comment">// 这两种写法是一样的，const只修饰右边的基本变量b</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">20</span>; <span class="comment">// b:只读变量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> b = <span class="number">20</span>; <span class="comment">// b:只读变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许修改值</span></span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const:修饰指针变量*p，带*的变量，就是指针变量.</span></span><br><span class="line">    <span class="comment">// 定义一个指向int类型的指针变量，指向a的地址</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    p = &amp;c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许修改p指向的地址，</span></span><br><span class="line">    <span class="comment">// 允许修改p访问内存空间的值</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const修饰指针变量访问的内存空间，修饰的是右边*p1，</span></span><br><span class="line">    <span class="comment">// 两种方式一样</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1; <span class="comment">// *p1：常量 p1:变量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> *p1; <span class="comment">// *p1：常量 p1:变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// const修饰指针变量p1</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p1; <span class="comment">// *p1:变量 p1:常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个const修饰*p1 第二个const修饰 p1</span></span><br><span class="line">    <span class="comment">// 两种方式一样</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p1; <span class="comment">// *p1：常量 p1：常量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p1;  <span class="comment">// *p1：常量 p1：常量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const开发中使用场景："><a href="#const开发中使用场景：" class="headerlink" title="const开发中使用场景："></a><strong>const开发中使用场景：</strong></h2><ol><li>当一个方法参数只读</li><li>定义只读全局变量</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义只读全局常量</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> str  = <span class="string">@"123"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个方法的参数，只读.</span></span><br><span class="line">- (<span class="keyword">void</span>)test:(<span class="built_in">NSString</span> * <span class="keyword">const</span>)name</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针只读,不能通过指针修改值</span></span><br><span class="line">- (<span class="keyword">void</span>)test1:(<span class="keyword">int</span> <span class="keyword">const</span> *)a&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    *a = 10;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本数据类型只读</span></span><br><span class="line">- (<span class="keyword">void</span>)test2:(<span class="keyword">int</span> <span class="keyword">const</span>)a&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="static和extern简单使用（）要使用一个东西，先了解其作用"><a href="#static和extern简单使用（）要使用一个东西，先了解其作用" class="headerlink" title="static和extern简单使用（）要使用一个东西，先了解其作用"></a><strong>static和extern简单使用（）要使用一个东西，先了解其作用</strong></h2><ul><li><p>static作用</p><ul><li>修饰局部变量：<ul><li>延长局部变量的生命周期,程序结束才会销毁。</li><li>局部变量只会生成一份内存,只会初始化一次。</li></ul></li><li>修饰全局变量<ul><li>只能在本文件中访问,修改全局变量的作用域,生命周期不会改</li></ul></li></ul></li><li><p>extern作用:</p><ul><li>只是用来获取全局变量(包括全局静态变量)的值，不能用于定义变量</li></ul></li><li><p>extern工作原理:</p><ul><li>先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找。</li></ul></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量：只有一份内存，所有文件共享，与extern联合使用。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static修饰全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// static修饰局部变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">    age++;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static与cosnt联合使用"><a href="#static与cosnt联合使用" class="headerlink" title="static与cosnt联合使用"></a><strong>static与cosnt联合使用</strong></h2><ul><li>static与const作用:声明一个只读的静态变量</li><li>开发使用场景:在一个文件中经常使用的字符串常量，可以使用static与const组合</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发中常用static修饰全局变量,只改变作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么要改变全局变量作用域，防止重复声明全局变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发中声明的全局变量，有些不希望外界改动，只允许读取。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如一个基本数据类型不希望别人改动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个静态的全局只读常量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// staic和const联合的作用:声明一个静态的全局只读常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iOS中staic和const常用使用场景，是用来代替宏，把一个经常使用的字符串常量，定义成静态全局只读变量.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发中经常拿到key修改值，因此用const修饰key,表示key只读，不允许修改。</span></span><br><span class="line"><span class="keyword">static</span>  <span class="built_in">NSString</span> * <span class="keyword">const</span> key = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 const修饰 *key1,表示*key1只读，key1还是能改变。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>  <span class="built_in">NSString</span> <span class="keyword">const</span> *key1 = <span class="string">@"name"</span>;</span><br></pre></td></tr></table></figure><h2 id="extern与const联合使用"><a href="#extern与const联合使用" class="headerlink" title="extern与const联合使用"></a><strong>extern与const联合使用</strong></h2><ul><li>开发中使用场景:在多个文件中经常使用的同一个字符串常量，可以使用extern与const组合。</li><li>原因:<ul><li>static与const组合：在每个文件都需要定义一份静态全局变量。</li><li>extern与const组合:只需要定义一份全局变量，多个文件共享。</li></ul></li><li>全局常量正规写法:开发中便于管理所有的全局变量，通常搞一个GlobeConst文件，里面专门定义全局变量，统一管理，要不然项目文件多不好找。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GlobeConst.h</span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> nameKey = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GlobeConst.m</span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> nameKey = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;const与宏的区别：&quot;&gt;&lt;a href=&quot;#const与宏的区别：&quot; class=&quot;headerlink&quot; title=&quot;const与宏的区别：&quot;&gt;&lt;/a&gt;&lt;strong&gt;const与宏的区别：&lt;/strong&gt;&lt;/h2&gt;&lt;p style=&quot;text-
      
    
    </summary>
    
      <category term="iOS" scheme="https://alongisme.github.io/categories/iOS/"/>
    
    
      <category term="面试题" scheme="https://alongisme.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="基础知识" scheme="https://alongisme.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="static" scheme="https://alongisme.github.io/tags/static/"/>
    
      <category term="const" scheme="https://alongisme.github.io/tags/const/"/>
    
      <category term="extern" scheme="https://alongisme.github.io/tags/extern/"/>
    
  </entry>
  
</feed>
