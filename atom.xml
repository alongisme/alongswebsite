<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlongShi</title>
  
  
  <link href="/alongswebsite/atom.xml" rel="self"/>
  
  <link href="https://alongisme.github.io/"/>
  <updated>2019-07-05T05:29:49.315Z</updated>
  <id>https://alongisme.github.io/</id>
  
  <author>
    <name>Along Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;Intellij IDEA 注册码&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/05/Intellij_IDEA/"/>
    <id>https://alongisme.github.io/2019/07/05/Intellij_IDEA/</id>
    <published>2019-07-05T03:35:35.000Z</published>
    <updated>2019-07-05T05:29:49.315Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">获取注册码地址</a>  </p></blockquote><p><code>注意</code><br>针对2019版本 请不要参照网站的做法，按照我的来</p><ul><li>第一步将：0.0.0.0 <a href="https://account.jetbrains.com:443加入hosts，不需要0.0.0.0" target="_blank" rel="noopener">https://account.jetbrains.com:443加入hosts，不需要0.0.0.0</a> <a href="http://www.jetbrains.com，不然会影响idea的某些功能" target="_blank" rel="noopener">www.jetbrains.com，不然会影响idea的某些功能</a></li><li>第二步 打开cmd终端，输入ipconfig /flushdns，然后回车刷新dns缓存</li><li>第三步 输入lanyu序列号，成功开车！<br>hosts文件只添加上面这一条就可以了 account和www那个删掉，我是2019.1.2,系统deepin15.10.1，成功激活了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://idea.lanyus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;获取注册码地址&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="工具" scheme="https://alongisme.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="intellij" scheme="https://alongisme.github.io/tags/intellij/"/>
    
      <category term="IDEA" scheme="https://alongisme.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;Markdown 基础&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/05/markdown/"/>
    <id>https://alongisme.github.io/2019/07/05/markdown/</id>
    <published>2019-07-05T02:26:58.000Z</published>
    <updated>2019-07-05T05:40:26.343Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Markdown-基础"><a href="#Markdown-基础" class="headerlink" title="Markdown 基础"></a><strong>Markdown 基础</strong></h1><h2 id="Markdown语法常用分类"><a href="#Markdown语法常用分类" class="headerlink" title="Markdown语法常用分类"></a><strong>Markdown语法常用分类</strong></h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h3><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line">二级标题</span><br><span class="line">---</span><br><span class="line"># 一级标题 </span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a><strong>段落</strong></h3><p>段落的前后要有空行，所谓的空行是指没有文字内容。<br>若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）</p><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h3><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p><blockquote><p>三层嵌套引用</p><blockquote><p>四层嵌套引用</p><blockquote><p>…以此类推</p></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt;&gt; 嵌套引用</span><br><span class="line">&gt;&gt;&gt; 三层嵌套引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四层嵌套引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; ...以此类推</span><br></pre></td></tr></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a><strong>代码区块</strong></h3><blockquote><p>每行缩进tab</p></blockquote><pre><code>void print(int value) {    print(&quot;%d&quot;, value);}</code></pre><blockquote><p>&lt;pre&gt;&lt;code&gt;标签</p></blockquote><pre><code>void print(int value) {    print("%d", value);}</code></pre><blockquote><p>```指定语言<br>```</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    print(<span class="string">"%d"</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    void print(int value) &#123;</span><br><span class="line">        print(&quot;%d&quot;, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;code&gt;</span><br><span class="line">void print(int value) &#123;</span><br><span class="line">    print(&quot;%d&quot;, value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line">void print(int value) &#123;</span><br><span class="line">    print(&quot;%d&quot;, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h3><p><em>斜体</em><br><em>斜体</em><br><strong>粗体</strong><br><strong>粗体</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">_斜体_  </span><br><span class="line">**粗体**</span><br><span class="line">__粗体__</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><blockquote><p>使用 * 、 + 和 - 任一符号标记</p><ul><li>第一项</li></ul><ul><li>第二项</li></ul><ul><li>第三项</li></ul><ul><li>第四项</li></ul><ul><li>第五项</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">- 第三项</span><br><span class="line">* 第四项</span><br><span class="line">+ 第五项</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h3><hr><hr><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">_____</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a><strong>链接</strong></h3><p><a href="https://www.google.com" target="_blank" rel="noopener">Google</a><br><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Google](https://www.google.com)  </span><br><span class="line">&lt;https://www.google.com&gt;</span><br></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h3><p><img src="https://github.com/fluidicon.png" alt="GitHub"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![GitHub](https://github.com/fluidicon.png)</span><br></pre></td></tr></table></figure><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a><strong>反斜杠</strong></h3><p>相当于反转义作用。使符号成为普通符号。<br>-–<br>*a*  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\---  </span><br><span class="line">\*a*</span><br></pre></td></tr></table></figure><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a><strong>符号</strong></h3><p><code>标记</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`标记`</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h3><blockquote><p>代码块支持高亮的语言  </p></blockquote><table><thead><tr><th>language</th><th>key</th></tr></thead><tbody><tr><td>1C</td><td>1c</td></tr><tr><td>ActionScript</td><td>actionscript</td></tr><tr><td>Apache</td><td>apache</td></tr><tr><td>AppleScript</td><td>applescript</td></tr><tr><td>AsciiDoc</td><td>asciidoc</td></tr><tr><td>AspectJ</td><td>asciidoc</td></tr><tr><td>AutoHotkey</td><td>autohotkey</td></tr><tr><td>AVR Assembler</td><td>avrasm</td></tr><tr><td>Axapta</td><td>axapta</td></tr><tr><td>Bash</td><td>bash</td></tr><tr><td>BrainFuck</td><td>brainfuck</td></tr><tr><td>Cap’n Proto</td><td>capnproto</td></tr><tr><td>Clojure REPL</td><td>clojure</td></tr><tr><td>Clojure</td><td>clojure</td></tr><tr><td>CMake</td><td>cmake</td></tr><tr><td>CoffeeScript</td><td>coffeescript</td></tr><tr><td>C++</td><td>cpp</td></tr><tr><td>C#</td><td>cs</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>D</td><td>d</td></tr><tr><td>Dart</td><td>d</td></tr><tr><td>Delphi</td><td>delphi</td></tr><tr><td>Diff</td><td>diff</td></tr><tr><td>Django</td><td>django</td></tr><tr><td>DOS.bat</td><td>dos</td></tr><tr><td>Dust</td><td>dust</td></tr><tr><td>Elixir</td><td>elixir</td></tr><tr><td>ERB(Embedded Ruby)</td><td>erb</td></tr><tr><td>Erlang REPL</td><td>erlang-repl</td></tr><tr><td>Erlang</td><td>erlang</td></tr><tr><td>FIX</td><td>fix</td></tr><tr><td>F#</td><td>fsharp</td></tr><tr><td>G-code(ISO 6983)</td><td>gcode</td></tr><tr><td>Gherkin</td><td>gherkin</td></tr><tr><td>GLSL</td><td>glsl</td></tr><tr><td>Go</td><td>go</td></tr><tr><td>Gradle</td><td>gradle</td></tr><tr><td>Groovy</td><td>groovy</td></tr><tr><td>Haml</td><td>haml</td></tr><tr><td>Handlebars</td><td>handlebars</td></tr><tr><td>Haskell</td><td>haskell</td></tr><tr><td>Haxe</td><td>haxe</td></tr><tr><td>HTML</td><td>html</td></tr><tr><td>HTTP</td><td>http</td></tr><tr><td>Ini file</td><td>ini</td></tr><tr><td>Java</td><td>java</td></tr><tr><td>JavaScript</td><td>javascript</td></tr><tr><td>JSON</td><td>json</td></tr><tr><td>Lasso</td><td>lasso</td></tr><tr><td>Less</td><td>less</td></tr><tr><td>Lisp</td><td>lisp</td></tr><tr><td>LiveCode</td><td>livecodeserver</td></tr><tr><td>LiveScript</td><td>livescript</td></tr><tr><td>Lua</td><td>lua</td></tr><tr><td>Makefile</td><td>makefile</td></tr><tr><td>Markdown</td><td>markdown</td></tr><tr><td>Mathematica</td><td>mathematica</td></tr><tr><td>Matlab</td><td>matlab</td></tr><tr><td>MEL (Maya Embedded Language)</td><td>mel</td></tr><tr><td>Mercury</td><td>mercury</td></tr><tr><td>Mizar</td><td>mizar</td></tr><tr><td>Monkey</td><td>monkey</td></tr><tr><td>Nginx</td><td>nginx</td></tr><tr><td>Nimrod</td><td>nimrod</td></tr><tr><td>Nix</td><td>nix</td></tr><tr><td>NSIS</td><td>nsis</td></tr><tr><td>Objective C</td><td>objectivec</td></tr><tr><td>OCaml</td><td>ocaml</td></tr><tr><td>Oxygene</td><td>oxygene</td></tr><tr><td>Parser 3</td><td>parser3</td></tr><tr><td>Perl</td><td>perl</td></tr><tr><td>PHP</td><td>php</td></tr><tr><td>PowerShell</td><td>powershell</td></tr><tr><td>Processing</td><td>processing</td></tr><tr><td>Python’s profiler output</td><td>profile</td></tr><tr><td>Protocol Buffers</td><td>protobuf</td></tr><tr><td>Puppet</td><td>puppet</td></tr><tr><td>Python</td><td>python</td></tr><tr><td>Q</td><td>q</td></tr><tr><td>R</td><td>r</td></tr><tr><td>RenderMan RIB</td><td>rib</td></tr><tr><td>Roboconf</td><td>roboconf</td></tr><tr><td>RenderMan RSL</td><td>rsl</td></tr><tr><td>Ruby</td><td>ruby</td></tr><tr><td>Oracle Rules Language</td><td>ruleslanguage</td></tr><tr><td>Rust</td><td>rust</td></tr><tr><td>Scala</td><td>scala</td></tr><tr><td>Scheme</td><td>scheme</td></tr><tr><td>Scilab</td><td>scilab</td></tr><tr><td>SCSS</td><td>scss</td></tr><tr><td>Smali</td><td>smali</td></tr><tr><td>SmallTalk</td><td>smalltalk</td></tr><tr><td>SML</td><td>sml</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>Stata</td><td>stata</td></tr><tr><td>STEP Part21(ISO 10303-21)</td><td>step21</td></tr><tr><td>Stylus</td><td>stylus</td></tr><tr><td>Swift</td><td>swift</td></tr><tr><td>Tcl</td><td>tcl</td></tr><tr><td>Tex</td><td>tex</td></tr><tr><td>text</td><td>text/plain</td></tr><tr><td>Thrift</td><td>thrift</td></tr><tr><td>Twig</td><td>twig</td></tr><tr><td>TypeScript</td><td>typescript</td></tr><tr><td>Vala</td><td>vala</td></tr><tr><td>VB.NET</td><td>vbnet</td></tr><tr><td>VBScript in HTML</td><td>vbscript-html</td></tr><tr><td>VBScript</td><td>vbscript</td></tr><tr><td>Verilog</td><td>verilog</td></tr><tr><td>VHDL</td><td>vhdl</td></tr><tr><td>Vim Script</td><td>vim</td></tr><tr><td>Intel x86 Assembly</td><td>x86asm</td></tr><tr><td>XL</td><td>xl</td></tr><tr><td>XML</td><td>xml</td></tr><tr><td>YAML</td><td>yml</td></tr></tbody></table><h2 id="Markdown-其他用法"><a href="#Markdown-其他用法" class="headerlink" title="Markdown 其他用法"></a><strong>Markdown 其他用法</strong></h2><h3 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h3><!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><!-- 其中 class="blockquote-center" 是必须的 --><blockquote class="blockquote-center">blah blah blah</blockquote><!-- 标签 方式，要求版本在0.4.5或以上 --><blockquote class="blockquote-center"><p>blah blah blah</p></blockquote><!-- 标签别名 --><blockquote class="blockquote-center"><p>blah blah blah </p></blockquote><h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><div class="note class_name">            <p>Content (md partial supported) </p>          </div>     * default  <div class="note default">            <p>Content (md partial supported) </p>          </div><ul><li><p>primary  </p><div class="note primary">            <p>Content (md partial supported) </p>          </div>* success  <div class="note success">            <p>Content (md partial supported) </p>          </div></li><li><p>info  </p><div class="note info">            <p>Content (md partial supported) </p>          </div>* warning  <div class="note warning">            <p>Content (md partial supported) </p>          </div></li><li><p>danger  </p><div class="note danger">            <p>Content (md partial supported) </p>          </div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Markdown-基础&quot;&gt;&lt;a href=&quot;#Markdown-基础&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;Markdown 基础&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;Markdow
      
    
    </summary>
    
      <category term="markdown" scheme="https://alongisme.github.io/categories/markdown/"/>
    
    
      <category term="标记语言" scheme="https://alongisme.github.io/tags/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
    
      <category term="基础知识" scheme="https://alongisme.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;NSLog 简介&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/04/nslog/"/>
    <id>https://alongisme.github.io/2019/07/04/nslog/</id>
    <published>2019-07-04T12:52:30.000Z</published>
    <updated>2019-07-05T01:39:14.766Z</updated>
    
    <content type="html"><![CDATA[<hr><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifdef DEBUG  </span></span><br><span class="line"><span class="meta"># define DLog(fmt, ...) NSLog((@<span class="meta-string">"[文件名:%s]\n"</span> <span class="meta-string">"[函数名:%s]\n"</span> <span class="meta-string">"[行号:%d] \n"</span> fmt), __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__);  </span></span><br><span class="line"><span class="meta">#else  </span></span><br><span class="line"><span class="meta"># define DLog(...);  </span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure><ul><li><p>__VA_ARGS__ 是一个可变参数的宏，很少人知道这个宏，这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支持（VC6.0的编译器不支持）。宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的”,”去掉的作用,否则会编译出错, 你可以试试。</p></li><li><p>__FILE__ 宏在预编译时会替换成当前的源文件名</p></li><li><p>__LINE__宏在预编译时会替换成当前的行号</p></li><li><p>__FUNCTION__宏在预编译时会替换成当前的函数名称<br>有了以上这几个宏，特别是有了__VA_ARGS__ ，调试信息的输出就变得灵活多了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
      <category term="iOS" scheme="https://alongisme.github.io/categories/iOS/"/>
    
    
      <category term="NSLog" scheme="https://alongisme.github.io/tags/NSLog/"/>
    
      <category term="控制台" scheme="https://alongisme.github.io/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>&lt;font size=7 face=&quot;黑体&quot;&gt;&lt;b&gt;const static extern 简介&lt;/b&gt;&lt;/font&gt;</title>
    <link href="https://alongisme.github.io/2019/07/04/const_static_extern/"/>
    <id>https://alongisme.github.io/2019/07/04/const_static_extern/</id>
    <published>2019-07-04T06:45:03.000Z</published>
    <updated>2019-07-05T02:22:58.456Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="const与宏的区别："><a href="#const与宏的区别：" class="headerlink" title="const与宏的区别："></a><strong>const与宏的区别：</strong></h2><p style="text-indent:2em">const简介：之前常用的字符串常量，一般是抽成宏，但是苹果不推荐我们抽成宏，推荐我们使用const常量。</p><ul><li>编译时刻:宏是预编译（编译之前处理），const是编译阶段。</li><li>编译检查:宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。</li><li>宏的好处:宏能定义一些函数，方法。 const不能。</li><li>宏的坏处:使用大量宏，容易造成编译时间久，每次都需要重新替换。</li></ul><p style="text-indent:2em">注意:很多Blog都说使用宏，会消耗很多内存，我这验证并不会生成很多内存，宏定义的是常量，常量都放在常量区，只会生成一份内存。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见的常量：抽成宏</span></span><br><span class="line"><span class="meta">#define XMGAccount @<span class="meta-string">"account"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define XMGUserDefault [NSUserDefaults standardUserDefaults]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串常量</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> account = <span class="string">@"account"</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 偏好设置存储</span></span><br><span class="line">    <span class="comment">// 使用宏</span></span><br><span class="line">    [XMGUserDefault setValue:<span class="string">@"123"</span> forKey:XMGAccount];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用const常量</span></span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:<span class="string">@"123"</span> forKey:account];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const作用：限制类型"><a href="#const作用：限制类型" class="headerlink" title="const作用：限制类型"></a><strong>const作用：限制类型</strong></h2><ol><li>const仅仅用来修饰右边的变量（基本数据变量p，指针变量*p）</li><li>被const修饰的变量是只读的。</li><li>const 的基本使用</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许修改值</span></span><br><span class="line">    a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const两种用法</span></span><br><span class="line">    <span class="comment">// const:修饰基本变量p</span></span><br><span class="line">    <span class="comment">// 这两种写法是一样的，const只修饰右边的基本变量b</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">20</span>; <span class="comment">// b:只读变量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> b = <span class="number">20</span>; <span class="comment">// b:只读变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许修改值</span></span><br><span class="line">    b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const:修饰指针变量*p，带*的变量，就是指针变量.</span></span><br><span class="line">    <span class="comment">// 定义一个指向int类型的指针变量，指向a的地址</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    p = &amp;c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许修改p指向的地址，</span></span><br><span class="line">    <span class="comment">// 允许修改p访问内存空间的值</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const修饰指针变量访问的内存空间，修饰的是右边*p1，</span></span><br><span class="line">    <span class="comment">// 两种方式一样</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p1; <span class="comment">// *p1：常量 p1:变量</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> *p1; <span class="comment">// *p1：常量 p1:变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// const修饰指针变量p1</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p1; <span class="comment">// *p1:变量 p1:常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个const修饰*p1 第二个const修饰 p1</span></span><br><span class="line">    <span class="comment">// 两种方式一样</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p1; <span class="comment">// *p1：常量 p1：常量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p1;  <span class="comment">// *p1：常量 p1：常量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const开发中使用场景："><a href="#const开发中使用场景：" class="headerlink" title="const开发中使用场景："></a><strong>const开发中使用场景：</strong></h2><ol><li>当一个方法参数只读</li><li>定义只读全局变量</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义只读全局常量</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> str  = <span class="string">@"123"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个方法的参数，只读.</span></span><br><span class="line">- (<span class="keyword">void</span>)test:(<span class="built_in">NSString</span> * <span class="keyword">const</span>)name</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针只读,不能通过指针修改值</span></span><br><span class="line">- (<span class="keyword">void</span>)test1:(<span class="keyword">int</span> <span class="keyword">const</span> *)a&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    *a = 10;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本数据类型只读</span></span><br><span class="line">- (<span class="keyword">void</span>)test2:(<span class="keyword">int</span> <span class="keyword">const</span>)a&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="static和extern简单使用"><a href="#static和extern简单使用" class="headerlink" title="static和extern简单使用"></a><strong>static和extern简单使用</strong></h2><ul><li><p>static作用</p><ul><li>修饰局部变量：<ul><li>延长局部变量的生命周期,程序结束才会销毁。</li><li>局部变量只会生成一份内存,只会初始化一次。</li></ul></li><li>修饰全局变量<ul><li>只能在本文件中访问,修改全局变量的作用域,生命周期不会改</li></ul></li></ul></li><li><p>extern作用:</p><ul><li>只是用来获取全局变量(包括全局静态变量)的值，不能用于定义变量</li></ul></li><li><p>extern工作原理:</p><ul><li>先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找。</li></ul></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量：只有一份内存，所有文件共享，与extern联合使用。</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static修饰全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// static修饰局部变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">    age++;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static与cosnt联合使用"><a href="#static与cosnt联合使用" class="headerlink" title="static与cosnt联合使用"></a><strong>static与cosnt联合使用</strong></h2><ul><li>static与const作用:声明一个只读的静态变量</li><li>开发使用场景:在一个文件中经常使用的字符串常量，可以使用static与const组合</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发中常用static修饰全局变量,只改变作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么要改变全局变量作用域，防止重复声明全局变量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发中声明的全局变量，有些不希望外界改动，只允许读取。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如一个基本数据类型不希望别人改动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个静态的全局只读常量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// staic和const联合的作用:声明一个静态的全局只读常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iOS中staic和const常用使用场景，是用来代替宏，把一个经常使用的字符串常量，定义成静态全局只读变量.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发中经常拿到key修改值，因此用const修饰key,表示key只读，不允许修改。</span></span><br><span class="line"><span class="keyword">static</span>  <span class="built_in">NSString</span> * <span class="keyword">const</span> key = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 const修饰 *key1,表示*key1只读，key1还是能改变。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>  <span class="built_in">NSString</span> <span class="keyword">const</span> *key1 = <span class="string">@"name"</span>;</span><br></pre></td></tr></table></figure><h2 id="extern与const联合使用"><a href="#extern与const联合使用" class="headerlink" title="extern与const联合使用"></a><strong>extern与const联合使用</strong></h2><ul><li>开发中使用场景:在多个文件中经常使用的同一个字符串常量，可以使用extern与const组合。</li><li>原因:<ul><li>static与const组合：在每个文件都需要定义一份静态全局变量。</li><li>extern与const组合:只需要定义一份全局变量，多个文件共享。</li></ul></li><li>全局常量正规写法:开发中便于管理所有的全局变量，通常搞一个GlobeConst文件，里面专门定义全局变量，统一管理，要不然项目文件多不好找。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GlobeConst.h</span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> nameKey = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GlobeConst.m</span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> nameKey = <span class="string">@"name"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************首页****************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;const与宏的区别：&quot;&gt;&lt;a href=&quot;#const与宏的区别：&quot; class=&quot;headerlink&quot; title=&quot;const与宏的区别：&quot;&gt;&lt;/a&gt;&lt;strong&gt;const与宏的区别：&lt;/strong&gt;&lt;/h2&gt;&lt;p style=&quot;text-
      
    
    </summary>
    
      <category term="iOS" scheme="https://alongisme.github.io/categories/iOS/"/>
    
    
      <category term="面试题" scheme="https://alongisme.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="static" scheme="https://alongisme.github.io/tags/static/"/>
    
      <category term="const" scheme="https://alongisme.github.io/tags/const/"/>
    
      <category term="extern" scheme="https://alongisme.github.io/tags/extern/"/>
    
  </entry>
  
</feed>
